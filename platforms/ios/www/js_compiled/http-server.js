// Generated by CoffeeScript 1.8.0
(function() {
  var httpd, uriToPath;

  httpd = void 0;

  document.addEventListener("deviceready", function() {
    var _ref;
    httpd = typeof cordova !== "undefined" && cordova !== null ? (_ref = cordova.plugins) != null ? _ref.CordovaUpdate : void 0 : void 0;
    return window.startServer();
  });

  window.log = console.log.bind(console);

  uriToPath = function(uri) {
    return decodeURI(uri).replace(/^file:\/\//g, '');
  };

  window.startServer = function(wwwroot) {
    var cordovaRoot, failure, options, success;
    if (httpd == null) {
      return console.log('CorHttpd plugin not available/ready.');
    }
    cordovaRoot = uriToPath(window.location.href).replace(/\/index.html$/, '/');
    console.log('cordovaRoot', cordovaRoot);
    console.log('uriToPath cordova.file.dataDirectory', uriToPath(cordova.file.dataDirectory));
    options = {
      'www_root': uriToPath(cordova.file.dataDirectory),
      'cordovajs_root': cordovaRoot
    };
    success = function(url) {
      return console.log("server is started:", url);
    };
    failure = function(error) {
      return console.log('failed to start server:', error);
    };
    return httpd.startServer(options, success, failure);
  };

  window.downloadFile = function(url) {
    var ft, uri, urlPrefix, versionPrefix;
    ft = new FileTransfer();
    console.log("start downloading " + url);
    urlPrefix = 'http://localhost:3000/' + '__cordova';
    versionPrefix = uriToPath(cordova.file.dataDirectory);
    uri = encodeURI(urlPrefix + url + '?' + Math.round(Math.random() * 10000000));
    console.log("uri", uri);
    console.log("versionPrefix + encodeURI(url)", versionPrefix + encodeURI(url));
    return ft.download(uri, versionPrefix + encodeURI(url), function(entry) {
      if (entry) {
        return console.log("done downloading " + url);
      }
    }, function(err) {
      return console.log('downloadFile err', err);
    });
  };

  window.startDownload = function() {
    return $.getJSON('http://localhost:3000/__cordova/manifest.json', function(data) {
      var item, _i, _len, _ref, _ref1, _results;
      if ((data != null ? (_ref = data.manifest) != null ? _ref.length : void 0 : void 0) > 0) {
        data.manifest.push({
          url: '/index.html?' + Math.round(Math.random() * 10000000)
        });
        _ref1 = data.manifest;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          if ((item != null ? item.url : void 0) != null) {
            _results.push(window.downloadFile(item.url.replace(/\?.+$/, '')));
          }
        }
        return _results;
      }
    });
  };

  window.listDirectory = function(url, options, cb) {
    var fail, resolveSuccess;
    if (typeof options === 'function') {
      cb = options;
      options = {};
    }
    fail = function(err) {
      return cb(err);
    };
    resolveSuccess = function(entry) {
      var readEntriesSuccess, reader;
      readEntriesSuccess = function(entries) {
        var names, _i, _len;
        window.entries = entries;
        names = [];
        for (_i = 0, _len = entries.length; _i < _len; _i++) {
          entry = entries[_i];
          names.push(entry.name);
        }
        return cb(null, names);
      };
      reader = entry.createReader();
      return reader.readEntries(readEntriesSuccess, fail);
    };
    return window.resolveLocalFileSystemURL(url, resolveSuccess, fail);
  };

  window.writeFile = function(directoryPath, fileName, content, cb) {
    var fail, resolveSuccess;
    fail = function(err) {
      return cb(err, null);
    };
    resolveSuccess = function(dirEntry) {
      var getFileOptions, getFileSuccess;
      getFileSuccess = function(fileEntry) {
        var createWriterSuccess;
        createWriterSuccess = function(writer) {
          writer.onwrite = function(evt, a) {
            return cb(null, evt.target.result);
          };
          writer.onerror = fail;
          return writer.write(content);
        };
        return fileEntry.createWriter(createWriterSuccess, fail);
      };
      getFileOptions = {
        create: true,
        exclusive: false
      };
      return dirEntry.getFile(fileName, getFileOptions, getFileSuccess, fail);
    };
    return window.resolveLocalFileSystemURL(directoryPath, resolveSuccess, fail);
  };

  window.writeDir = function(directoryPath, dirName, cb) {
    var fail, resolveSuccess;
    fail = function(err) {
      return cb(err, null);
    };
    resolveSuccess = function(dirEntry) {
      var getDirectorySuccess;
      getDirectorySuccess = function(fileEntry) {
        return console.log('created');
      };
      return dirEntry.getDirectory(dirName, {
        create: true
      }, getDirectorySuccess, fail);
    };
    return window.resolveLocalFileSystemURL(directoryPath, resolveSuccess, fail);
  };

}).call(this);
